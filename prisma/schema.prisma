generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Attendance {
  id              String    @id @default(uuid())
  scheduleId      String    @unique
  patientId       String
  doctorId        String
  status          String    @default("in_progress")
  symptoms        String?
  diagnosis       String?
  prescription    String?
  observations    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  schedule        Schedule  @relation(fields: [scheduleId], references: [id])
  patient         User      @relation("PatientAttendances", fields: [patientId], references: [id])
  doctor          User      @relation("DoctorAttendances", fields: [doctorId], references: [id])
  vitalSigns      VitalSigns[]
  medicalCertificates MedicalCertificate[]
  medications     Medication[]
  medicalExams    MedicalExam[]
  clinicalNotes   ClinicalNote[]
  prescriptions   Prescription[]
  certificates    Certificate[]

  @@map("attendances")
  @@index([doctorId])
  @@index([patientId])
}

model Prescription {
  id           String      @id @default(uuid())
  userId       String
  attendanceId String?
  medications  Json
  observations String?
  date         DateTime    @default(now())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  attendance   Attendance? @relation(fields: [attendanceId], references: [id])
  user         User        @relation("UserPrescriptions", fields: [userId], references: [id])

  @@map("prescriptions")
}

model Certificate {
  id           String      @id @default(uuid())
  userId       String
  attendanceId String?
  type         String
  startDate    DateTime
  endDate      DateTime?
  cid          String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  attendance   Attendance? @relation(fields: [attendanceId], references: [id])
  user         User        @relation("UserCertificates", fields: [userId], references: [id])

  @@map("certificates")
}

model Schedule {
  id          String     @id @default(uuid())
  userId      String
  doctorId    String
  date        DateTime
  time        String
  status      String     @default("pending")
  type        String
  notes       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  doctor      User       @relation("DoctorSchedules", fields: [doctorId], references: [id])
  user        User       @relation("UserSchedules", fields: [userId], references: [id])
  attendance  Attendance?

  @@map("schedules")
}

model Role {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       User[]

  @@map("roles")
}

model User {
  id                String       @id @default(uuid())
  name              String
  nomeSocial        String?
  email             String       @unique
  password          String
  googleId          String?
  profilePicture    String?
  isActive          Boolean      @default(true)
  roleId            String
  dateOfBirth       DateTime?    // mantido para compatibilidade
  gender            String?      // mantido para compatibilidade
  naturalidade      String?
  nomeMae           String?
  nomePai           String?
  estadoCivil       String?
  escolaridade      String?
  telefone          String?
  celular           String?
  tipoSanguineo     String?
  raca              String?
  cpf               String?      @unique
  insurance         String?
  specialty         String?     // Campo para especialidade do médico
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  role              Role         @relation(fields: [roleId], references: [id])
  schedules         Schedule[]   @relation("DoctorSchedules")
  userSchedules     Schedule[]   @relation("UserSchedules")
  patientAttendances Attendance[] @relation("PatientAttendances")
  doctorAttendances  Attendance[] @relation("DoctorAttendances")
  prescriptions     Prescription[] @relation("UserPrescriptions")
  certificates      Certificate[]  @relation("UserCertificates")
  specialties       UserSpecialty[]
  vitalSigns        VitalSigns[]          @relation("UserVitalSigns")
  medicalCertificates MedicalCertificate[]  @relation("UserMedicalCertificates")
  medications       Medication[]          @relation("UserMedications")
  medicalExams      MedicalExam[]         @relation("UserMedicalExams")
  clinicalNotes     ClinicalNote[]        @relation("UserClinicalNotes")
  allergies         Allergy[]             @relation("UserAllergies")

  @@map("users")
}

model Specialty {
  id          String         @id @default(uuid())
  name        String         @unique
  description String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  users       UserSpecialty[]

  @@map("specialties")
}

model UserSpecialty {
  id          String    @id @default(uuid())
  userId      String
  specialtyId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  specialty   Specialty @relation(fields: [specialtyId], references: [id])

  @@unique([userId, specialtyId])
  @@map("user_specialties")
}

model Fabricante {
  id            String        @id @default(uuid())
  nome          String
  registroAnvisa String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  medicamentos  Medicamento[]

  @@map("fabricantes")
}

model Medicamento {
  id                    String        @id @default(uuid())
  nomeComercial         String
  nomeGenerico          String
  codigoInterno         String        @unique
  apresentacao          String
  formaFarmaceutica     String
  dosagem               String
  unidadeMedida         String
  registroAnvisa        String
  lote                  String
  dataFabricacao        DateTime
  dataValidade          DateTime
  quantidadeEstoque     Int
  quantidadeMinima      Int
  localArmazenamento    String
  condicoesArmazenamento String
  tipoControle          String
  classificacaoTerapeutica String
  necessitaPrescricao   Boolean
  restricoesUso         String?
  indicacoes            String?
  contraIndicacoes      String?
  efeitosColaterais     String?
  posologiaPadrao       String?
  observacoes           String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  fabricanteId          String
  fabricante            Fabricante    @relation(fields: [fabricanteId], references: [id])

  @@map("medicamentos")
}

model VitalSigns {
  id            String      @id @default(uuid())
  userId        String
  attendanceId  String?
  temperature   Float?
  bloodPressure String?
  heartRate     Int?
  respiratoryRate Int?
  oxygenSaturation Int?
  weight        Float?
  height        Float?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation("UserVitalSigns", fields: [userId], references: [id])
  attendance    Attendance? @relation(fields: [attendanceId], references: [id])

  @@map("vital_signs")
}

model MedicalCertificate {
  id            String      @id @default(uuid())
  userId        String
  attendanceId  String?
  type          String      // Tipo do atestado (trabalho, escola, etc)
  startDate     DateTime
  endDate       DateTime?
  cid           String?     // Classificação Internacional de Doenças
  description   String
  daysOff       Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation("UserMedicalCertificates", fields: [userId], references: [id])
  attendance    Attendance? @relation(fields: [attendanceId], references: [id])

  @@map("medical_certificates")
}

model Medication {
  id              String    @id @default(uuid())
  userId          String
  attendanceId    String?
  name            String
  dosage          String
  frequency       String
  duration        String?
  instructions    String?
  startDate       DateTime
  endDate         DateTime?
  active          Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation("UserMedications", fields: [userId], references: [id])
  attendance      Attendance? @relation(fields: [attendanceId], references: [id])

  @@map("medications")
}

model MedicalExam {
  id           String      @id @default(uuid())
  examType     String
  requestDate  DateTime
  resultDate   DateTime?
  status       String      @default("pending") // pending, completed, canceled
  result       String?     // URL do resultado do exame
  laboratory   String?
  observations String?
  attachments  String[]    // Array de URLs dos anexos
  attendance   Attendance  @relation(fields: [attendanceId], references: [id])
  attendanceId String
  user         User        @relation("UserMedicalExams", fields: [userId], references: [id])
  userId       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("medical_exams")
}

model ClinicalNote {
  id            String      @id @default(uuid())
  userId        String
  attendanceId  String?
  noteType      String      // evolução, prescrição, etc
  content       String      @db.Text
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation("UserClinicalNotes", fields: [userId], references: [id])
  attendance    Attendance? @relation(fields: [attendanceId], references: [id])

  @@map("clinical_notes")
}

model Allergy {
  id            String    @id @default(uuid())
  userId        String
  allergen      String    // Substância/item causador
  severity      String    // leve, moderada, grave
  reactions     String    // Descrição das reações
  diagnosed     DateTime?
  notes         String?
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation("UserAllergies", fields: [userId], references: [id])

  @@map("allergies")
}
